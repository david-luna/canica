import { createSlice } from '@reduxjs/toolkit';
import { RootState } from '../../store';
import { loginAsync } from './thunks';

export interface User {
  name: string;
  email: string;
}

export interface AuthState {
  status: 'idle' | 'loading' | 'complete' | 'error';
  user: User | void;
}

const initialState: AuthState = {
  status: 'idle',
  user: void 0,
};


export const authSlice = createSlice({
  name: 'auth',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    logout: (state) => {
      state.user = void 0;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(loginAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(loginAsync.fulfilled, (state, action) => {
        state.status = 'complete';
        state.user = action.payload;
      })
      .addCase(loginAsync.rejected, (state, action) => {
        state.status = 'error';
        state.user = void 0;
      });
  },
});

export const { logout } = authSlice.actions;
export { loginAsync } from './thunks';

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file.
export const selectUser = (state: RootState) => state.auth.user;
export const selectStatus = (state: RootState) => state.auth.status;

export default authSlice.reducer;
